from config import TOKEN
import telebot
from telebot import util
import random
import time

bot = telebot.TeleBot(TOKEN)

class Car:
    def __init__(self, color="–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω", brand="–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞"):
        self.color = color
        self.brand = brand
        
    def info(self):
        return f"üöó *–ú–∞—à–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞!*\n\n‚Ä¢ –ú–∞—Ä–∫–∞: {self.brand}\n‚Ä¢ –¶–≤–µ—Ç: {self.color}"

WELCOME_TEXT = """
‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞!* ‚ú®

üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/joke - –°–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞
/quote - –ú—É–¥—Ä–∞—è —Ü–∏—Ç–∞—Ç–∞
/fact - –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
/car [—Ü–≤–µ—Ç] [–º–∞—Ä–∫–∞] - –°–æ–∑–¥–∞—Ç—å –º–∞—à–∏–Ω—É

üîí *–ú–æ–¥–µ—Ä–∞—Ü–∏—è:*
- –°–æ–æ–±—â–µ–Ω–∏—è —Å —Å—Å—ã–ª–∫–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è
- –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∫–ª–∞–º—ã –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –±–∞–Ω—É
"""

JOKES = [
    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ –ª—é–±—è—Ç –ø—Ä–∏—Ä–æ–¥—É? –í –Ω–µ–π —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–∞–≥–æ–≤!",
    "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞—é—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±–æ–∏—Ç—Å—è –∂–µ–Ω—â–∏–Ω? –•–æ–ª–æ—Å—Ç—è–∫!"
]

QUOTES = [
    "¬´–õ—É—á—à–µ –º–µ–Ω—å—à–µ, –¥–∞ –ª—É—á—à–µ¬ª ‚Äî –ê–¥–æ–ª—å—Ñ –ì–∏—Ç–ª–µ—Ä",
    "¬´–ü—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è ‚Äî –∫–æ—Ä–µ–Ω—å –≤—Å–µ—Ö –∑–æ–ª¬ª ‚Äî –î–æ–Ω–∞–ª—å–¥ –ö–Ω—É—Ç"
]

FACTS = [
    "–°–∞–º–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –≤ –º–∏—Ä–µ ‚Äî üá¶üá∂",
    "–í –Ø–ø–æ–Ω–∏–∏ –±–æ–ª–µ–µ 50 000 —á–µ–ª–æ–≤–µ–∫ —Å—Ç–∞—Ä—à–µ 100 –ª–µ—Ç"
]

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    bot.reply_to(message, WELCOME_TEXT, parse_mode='Markdown')

@bot.message_handler(commands=['joke'])
def send_joke(message):
    bot.reply_to(message, f"üé≠ *–®—É—Ç–∫–∞ –¥–Ω—è:*\n\n{random.choice(JOKES)}", parse_mode='Markdown')

@bot.message_handler(commands=['quote'])
def send_quote(message):
    bot.reply_to(message, f"üìú *–ú—É–¥—Ä–∞—è —Ü–∏—Ç–∞—Ç–∞:*\n\n{random.choice(QUOTES)}", parse_mode='Markdown')

@bot.message_handler(commands=['fact'])
def send_fact(message):
    bot.reply_to(message, f"üîç *–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:*\n\n{random.choice(FACTS)}", parse_mode='Markdown')

@bot.message_handler(commands=['car'])
def create_car(message):
    try:
        args = util.extract_arguments(message.text).split()
        if len(args) < 2:
            bot.reply_to(message, "‚ùå *–û—à–∏–±–∫–∞!* –£–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç –∏ –º–∞—Ä–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª:\n`/car –∫—Ä–∞—Å–Ω—ã–π Toyota`", parse_mode='Markdown')
            return
            
        car = Car(color=args[0], brand=args[1])
        bot.reply_to(message, car.info(), parse_mode='Markdown')
        
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è *–û—à–∏–±–∫–∞:* {str(e)}", parse_mode='Markdown')

@bot.message_handler(func=lambda m: True, content_types=['text', 'photo', 'document', 'voice'])
def check_content(message):
    try:
        if message.text and ('http://' in message.text.lower() or 'https://' in message.text.lower()):
            handle_ban(message, "–†–∞—Å—Å—ã–ª–∫–∞ —Å—Å—ã–ª–æ–∫")
            
        elif message.content_type == 'photo':
            bot.reply_to(message, "üì∏ *–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ!* –°–ø–∞—Å–∏–±–æ –∑–∞ –∫—Ä–µ–∞—Ç–∏–≤!", parse_mode='Markdown')
            
        elif message.content_type == 'voice':
            bot.reply_to(message, "üéß *–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ*", parse_mode='Markdown')
            
        elif message.content_type == 'document':
            bot.reply_to(message, f"üìÅ *–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:* {message.document.file_name}", parse_mode='Markdown')

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {str(e)}")

def handle_ban(message, reason):
    try:
        bot.ban_chat_member(
            chat_id=message.chat.id,
            user_id=message.from_user.id,
            until_date=int(time.time()) + 2592000
        )
        
        bot.delete_message(message.chat.id, message.message_id)
        warning = f"""
üö´ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω!*
        
‚Ä¢ –ò–º—è: @{message.from_user.username}
‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {reason}
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: "{message.text[:50]}..."
        """
        bot.send_message(message.chat.id, warning, parse_mode='Markdown')
        
    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è *–û—à–∏–±–∫–∞ –±–∞–Ω–∞:* {str(e)}", parse_mode='Markdown')

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ")
    bot.infinity_polling()
